#!/usr/bin/env python

import click
import ldap
import yaml

from attributestorage import AttributeStorage as Storage
from attributestorage import MaximumSequenceNumberExceeded
from attributestorage import FileChanged as FileChanged
import common
from ldap_connection import LDAPinvalidCredentials
from ldap_connection import LDAPConnection

src_ldap = None
dst_ldap = None
verbose_level = 0
storage = None

supported_config_version = "2021.01"


class ConfigVersionMismatch(Exception):
    def __init__(self, version):
        self.version = version


def CheckConfigVersion(config):
    version = common.get_value_from_config(config, 'version')
    if version > supported_config_version:
        raise ConfigVersionMismatch(version)


def GetStorage(config, accept_file_change):
    if 'storage' in config:
        return Storage(config = config['storage'],
                       basedn = dst_ldap.basedn,
                       acceptFileChange = accept_file_change)

    return Storage()


def get_rdn(dn, index=0):
    try:
        k, v = dn.split(',')[index].split('=')
        return f'{k}={v}'
    except IndexError as e:
        print(e)


def add_to_entry(entry, attribute, value):
    if attribute in entry:
        entry[attribute] = [*entry[attribute], *value]
    elif type(value) == list:
        entry[attribute] = value
    else:
        entry[attribute] = [value]


def drop_attributes(attributes, entry):
    """Drop all the attributes from entry.
    """
    for attribute in attributes:
        try:
            if type(attribute) is list:
                tmp = attribute.copy()
                attribute_name = tmp.pop(0)
                for l in tmp:
                    try:
                        entry[attribute_name].remove(l)
                    except ValueError:
                        pass
            if type(attribute) is dict:
                for attribute_name, attributes in attribute.items():
                    for add_attribute in attributes:
                        try:
                            entry[attribute_name].remove(add_attribute)
                        except ValueError:
                            pass
            else:
                del entry[attribute]
        except KeyError:
            pass


def replace_basedn(attributes, entry):
    """Replace a DN with a basedn from source to destination LDAP.
    """

    global src_ldap, dst_ldap

    if type(attributes) is str:
        # If there is a single atrribute specified for which to change
        # the basedn, put it in an list. This list will have a single
        # elemant only, but it can be itterated in a loop, so that when
        # there a multiple attributes the loop can be used.
        attributes = [attributes]

    for attribute in attributes:
        if attribute in entry:
            for i in range(len(entry[attribute])):
                entry[attribute][i] = entry[attribute][i].replace(src_ldap.basedn, dst_ldap.basedn)


def add_attributes(attributes, entry, dn, extra_values={}):
    global storage

    for attribute in attributes:
        if 'attribute' in attribute:
            name = attribute['attribute']
            try:
                value = storage.GetAttibuteValue(dn, name)
                add_to_entry(entry, name, value)
            except KeyError:
                if attribute['source'] == 'literal':
                    storage.AddLiteral(dn, entry, name, attribute['value'])

                if attribute['source'] == 'sequence':
                    storage.AddSequence(dn, entry, attribute['name'])

                if attribute['source'] == 'attribute':
                    storage.AddFromAttribute(dn, entry, attribute, extra_values)

        if 'entry' in attribute:
            if 'add_attributes' in attribute:
                entry_dn = storage.Render(dn, attribute['entry'])
                k, v = get_left_most_rdn(entry_dn)
                additional_entry = { k: [v] }
                k, v = get_left_most_rdn(dn)
                xyz = { k: v }

                r = add_attributes(attribute['add_attributes'],
                               additional_entry,
                               entry_dn,
                               storage.GetEntryAttributes(dn) | xyz
                              )
                return { entry_dn: additional_entry } | r
    return {}


def get_left_most_rdn(dn):
    rdn = dn.split(',')[0]
    return rdn.split('=')


def copy_rdn(config, src_dn, dst_dn):
    if type(config) is list:
        for l in config:
            copy_rdn(l, src_dn, dst_dn)
        return

    rdn = config['rdn']
    r = src_ldap.find(src_dn, f'({rdn})', None, ldap.SCOPE_ONELEVEL)
    for dn, entry in r.items():
        extra_entries = {}

        rdn = get_rdn(dn)
        new_dst_dn = f'{rdn},{dst_dn}'

        if 'drop_attribute' in config:
            drop_attributes(config['drop_attribute'], entry)

        if 'replace_basedn' in config:
            replace_basedn(config['replace_basedn'], entry)

        if 'add_attributes' in config:
            extra_entries = add_attributes(config['add_attributes'], entry, new_dst_dn)

        dst_ldap.add_or_modify(new_dst_dn, entry)

        for dn, entry in extra_entries.items():
            dst_ldap.add_or_modify(dn, entry)

    if 'copy_rdn' in config:
        copy_rdn(config['copy_rdn'], f'{rdn},{src_dn}', f'{rdn},{dst_dn}')


def sync_ldap(sync_config):
    try:
        copy_rdn(sync_config['copy_rdn'], src_ldap.basedn, dst_ldap.basedn)
    except KeyError as e:
        print(f'Error in sync section of config file. Key not found: {e}')


@click.command()
@click.option('-v', '--verbose', help=f'Set verbosity level.', count=True)
@click.option('-c', '--accept-file-change', is_flag = True, default = False, help=f'Accept changes in the data input file.')
@click.argument('config_filename', type=click.Path(exists=True))
@click.version_option(version='2020-08-12')
def main(config_filename, accept_file_change, verbose):
    global src_ldap, dst_ldap
    global storage

    with open(config_filename, 'r') as fd:
        config = yaml.safe_load(fd)

    try:
        CheckConfigVersion(config)
        src_ldap = LDAPConnection(config, False, common.VerboseLevel.ERROR, 'ldap', 'src')
        dst_ldap = LDAPConnection(config, False, common.VerboseLevel.ERROR, 'ldap', 'dst')

        storage = GetStorage(config, accept_file_change)
        sync_ldap(common.get_value_from_config(config, 'sync'))
        storage.WriteData()
    except common.ConfigItemNotFound as e:
        print(f'Config error: key \'{e.config_item}\' does not exist in config file \'{config_filename}\'.')
    except LDAPinvalidCredentials as e:
        print(f'Invalid credentials were given for: \'{e.ldap_name}\'.')
    except ConfigVersionMismatch as e:
        print(f'Configuration version is greater then currenly supported. Config is {e.version}, supported is: {supported_config_version}')
    except MaximumSequenceNumberExceeded as e:
        print(f'Sequence numbers have been depleted.')
    except FileChanged as e:
        print(f'The data file \'{e.filename}\' has changed on disk. Aborting the synchronization.\nUse --continue-on-file-change if the changes need to be accepted.')


if __name__ == "__main__":
    main()
