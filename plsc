#!/usr/bin/env python

import click
import yaml
import ldap

import common
from ldap_connection import LDAPinvalidCredentials
from ldap_connection import LDAPConnection

src_ldap = None
dst_ldap = None
verbose_level = 0

supported_config_version = "2020.09"


class ConfigVersionMismatch(Exception):
    def __init__(self, version):
        self.version = version


def CheckConfigVersion(config):
    version = common.get_value_from_config(config, 'version')
    if version > supported_config_version:
        raise ConfigVersionMismatch(version)


def get_rdn(dn, index=0):
    l = dn.split(',')
    try:
        k, v = dn.split(',')[index].split('=')
        return f'{k}={v}'
    except IndexError as e:
        print(e)


def drop_attributes(config, entry):
    for drop_attribute in config['drop_attribute']:
        try:
            if type(drop_attribute) is list:
                tmp = drop_attribute.copy()
                k = tmp.pop(0)
                for l in tmp:
                    try:
                        entry[k].remove(l)
                    except ValueError as e:
                        pass
            else:
                del entry[drop_attribute]
        except KeyError as e:
            pass
    return entry


def copy_rdn(config, src_dn, dst_dn):
    if type(config) is list:
        for l in config:
            copy_rdn(l, src_dn, dst_dn)
        return

    rdn = config['rdn']
    r = src_ldap.find(src_dn, f'({rdn})', None, ldap.SCOPE_ONELEVEL)
    for dn, entry in r.items():
        if 'drop_attribute' in config:
            entry = drop_attributes(config, entry)

        rdn = get_rdn(dn)
        new_dst_dn = f'{rdn},{dst_dn}'
        dst_ldap.add_or_modify(new_dst_dn, entry)

    if 'copy_rdn' in config:
        copy_rdn(config['copy_rdn'], f'{rdn},{src_dn}', f'{rdn},{dst_dn}')


def sync_ldap(sync_config):
    try:
        copy_rdn(sync_config['copy_rdn'], src_ldap.basedn, dst_ldap.basedn)
    except KeyError as e:
        print(f'Error in sync section of config file. Key not found: {e}')


@click.command()
@click.option('-v', '--verbose', help=f'Set verbosity level.', count=True)
@click.argument('config_filename', type=click.Path(exists=True))
@click.version_option(version='2020-08-12')
def main(config_filename, verbose):
    global src_ldap, dst_ldap

    with open(config_filename, 'r') as fd:
        config = yaml.safe_load(fd)

    try:
        CheckConfigVersion(config)
        src_ldap = LDAPConnection(config, False, common.VerboseLevel.ERROR, 'ldap', 'src')
        dst_ldap = LDAPConnection(config, False, common.VerboseLevel.ERROR, 'ldap', 'dst')

        sync_ldap(common.get_value_from_config(config, 'sync'))
    except common.ConfigItemNotFound as e:
        print(f'Config error: key \'{e.config_item}\' does not exist in config file \'{config_filename}\'.')
    except LDAPinvalidCredentials as e:
        print(f'Invalid credentials were given for: \'{e.ldap_name}\'.')
    except ConfigVersionMismatch as e:
        print(f'Configuration version is greater then currenly supported. Config is {e.version}, supported is: {supported_config_version}')


if __name__ == "__main__":
    main()
